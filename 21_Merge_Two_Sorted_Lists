/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode mergeHead = new ListNode(0); //定义一个空链表
        ListNode tail = mergeHead; 
        if (list1 == null & list2 == null) {
            return null;
        }
        else if (list1 == null & list2 != null) {
            return list2;
        }
        else if (list1 != null & list2 == null) {
            return list1;
        }
        else {
            //-100 <= Node.val <= 100
            while(list1 != null && list2 != null) {
                //哪个小就把哪个往后面塞
                if (list1.val < list2.val) {
                    tail.next = list1;
                    list1 = list1.next;
                }
                else {
                    tail.next = list2;
                    list2 = list2.next;
                }
                tail = tail.next;
            }
            //其中一个链表已经全部塞到合并的链表后就把另一个接到后面就行
            if (list1 == null) {
                tail.next = list2;
            }
            else {
                tail.next = list1;
            }
            return mergeHead.next;
        } 
    }
}
